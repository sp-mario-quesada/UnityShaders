// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitGrassKernel
#pragma kernel UpdateGrassKernel

struct GrassData
{
	float3 pos;
	float3 front;
	float3 right;
	float flattening;
	float3 expansiveForce;
};

struct ObstacleData
{
	float3 pos;
	float radius;
	float expansiveForce;
};

float _DeltaTime;

RWStructuredBuffer<GrassData> _GrassBuffer;
Texture2D<float4> _NoiseTex;

float _Width;
float _Height;

RWStructuredBuffer<ObstacleData> _ObstaclesBuffer;
int _NumObstacles;

[numthreads(32,32,1)]
void InitGrassKernel (uint3 id : SV_DispatchThreadID, uint blockId : SV_GroupIndex)
{
	 int idx = 	id.x + id.y * _Width;
	
	 GrassData data;
	 data.pos = float3(id.x, 0, id.y) * 0.025;
	 
	 const float2 _noiseSampleScale = float2(50, 50);
	 const float2 _noiseAmplitude = float2(0.1, 0.1);
	 
	 int2 uv = int2((id.x*_noiseSampleScale.x)%64, (id.y*_noiseSampleScale.y)%64);
	 float2 noise = (_NoiseTex[uv]*2-1).xy*_noiseAmplitude;
	 data.pos.x += noise.x;
	 data.pos.z += noise.y;
	 
	 half angle = sin(idx*100);
	 data.front = normalize(half3(cos(angle), 0, sin(angle)));
	 half3 up = half3(0, 1, 0);
	 data.right = normalize(cross(up, data.front));
	 
	 data.flattening = 1;
	 data.expansiveForce = float3(0,0,0);
	 
    _GrassBuffer[idx] = data;
}

// Check Obstacles
[numthreads(32,32,1)]
void UpdateGrassKernel (uint3 id : SV_DispatchThreadID, uint blockId : SV_GroupIndex)
{
	int idx = 	id.x + id.y * _Width;
	GrassData data = _GrassBuffer[idx];
	
	float3 expansiveForce = float3(0,0,0);
	for(int i = 0; i < _NumObstacles; ++i)
	{
		float3 dirToObstacle = _ObstaclesBuffer[i].pos - data.pos;
		float obstacleRadiusSQ = _ObstaclesBuffer[i].radius*_ObstaclesBuffer[i].radius;
		
		float distToObstacleSQ = dirToObstacle.x*dirToObstacle.x + dirToObstacle.y*dirToObstacle.y + dirToObstacle.z*dirToObstacle.z;
		if(distToObstacleSQ-obstacleRadiusSQ < 0)
		{
			float flattening = (1-smoothstep(0, 1, distToObstacleSQ)) * _DeltaTime * 4;
			data.flattening = max(data.flattening - flattening, 0.2);
		}
		
		if(distToObstacleSQ-obstacleRadiusSQ < 4)
		{
			float forceIntensity = 1-smoothstep(0, 4, distToObstacleSQ);
			expansiveForce += normalize(-dirToObstacle) * _ObstaclesBuffer[i].expansiveForce * forceIntensity;
			expansiveForce.y = 0;
			data.expansiveForce = expansiveForce;
		}
	}
	_GrassBuffer[idx] = data;
}
